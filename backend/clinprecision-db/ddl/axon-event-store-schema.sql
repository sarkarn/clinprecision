-- =====================================================
-- Axon Framework JPA Event Store Schema
-- =====================================================
-- This script creates the required tables for Axon Framework's JPA Event Store
-- Run this script manually on the shared database that all microservices will use
-- 
-- Tables created:
-- - domain_event_entry: Stores all domain events
-- - snapshot_event_entry: Stores aggregate snapshots for performance
-- - association_value_entry: Used by Sagas for event associations
-- - token_entry: Tracks progress of event processors
-- =====================================================

-- Domain Event Entry Table
-- Stores all domain events generated by aggregates

USE clinprecisiondb;

CREATE TABLE  domain_event_entry (
    global_index BIGINT AUTO_INCREMENT NOT NULL,
    event_identifier VARCHAR(255) NOT NULL UNIQUE,
    aggregate_identifier VARCHAR(255) NOT NULL,
    sequence_number BIGINT NOT NULL,
    type VARCHAR(255),
    meta_data BLOB,
    payload BLOB NOT NULL,
    payload_revision VARCHAR(255),
    payload_type VARCHAR(255) NOT NULL,
    time_stamp VARCHAR(255) NOT NULL,
    
    PRIMARY KEY (global_index),
    UNIQUE KEY UK_domain_event_entry (aggregate_identifier, sequence_number),
    KEY IDX_domain_event_entry_time_stamp (time_stamp)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Snapshot Event Entry Table
-- Stores aggregate snapshots for performance optimization
CREATE TABLE  snapshot_event_entry (
    aggregate_identifier VARCHAR(255) NOT NULL,
    sequence_number BIGINT NOT NULL,
    type VARCHAR(255) NOT NULL,
    event_identifier VARCHAR(255) NOT NULL UNIQUE,
    meta_data BLOB,
    payload BLOB NOT NULL,
    payload_revision VARCHAR(255),
    payload_type VARCHAR(255) NOT NULL,
    time_stamp VARCHAR(255) NOT NULL,
    
    PRIMARY KEY (aggregate_identifier, sequence_number),
    KEY IDX_snapshot_event_entry_event_identifier (event_identifier)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Association Value Entry Table
-- Used by Sagas to associate events with saga instances
CREATE TABLE  association_value_entry (
    id BIGINT AUTO_INCREMENT NOT NULL,
    association_key VARCHAR(255) NOT NULL,
    association_value VARCHAR(255),
    saga_id VARCHAR(255) NOT NULL,
    saga_type VARCHAR(255),
    
    PRIMARY KEY (id),
    KEY IDX_association_value_entry (saga_id, saga_type),
    KEY IDX_association_value_entry_key_value (association_key, association_value)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Token Entry Table
-- Tracks the progress of event processors (projections)
CREATE TABLE  token_entry (
    processor_name VARCHAR(255) NOT NULL,
    segment INTEGER NOT NULL DEFAULT 0,
    token BLOB,
    token_type VARCHAR(255),
    timestamp VARCHAR(255),
    owner VARCHAR(255),
    
    PRIMARY KEY (processor_name, segment)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Hibernate Sequence Tables for ID Generation
-- Required for JPA sequence ID generation used by Axon Framework

-- Domain Event Entry sequence table
CREATE TABLE domain_event_entry_seq (
    next_val BIGINT
) ENGINE=InnoDB;

-- Association Value Entry sequence table  
CREATE TABLE association_value_entry_seq (
    next_val BIGINT
) ENGINE=InnoDB;

-- Token Entry sequence table (if needed)
CREATE TABLE token_entry_seq (
    next_val BIGINT
) ENGINE=InnoDB;


-- Saga Entry Table
-- Stores saga instances and their state
CREATE TABLE IF NOT EXISTS saga_entry (
    saga_id VARCHAR(255) NOT NULL,
    revision VARCHAR(255),
    saga_type VARCHAR(255),
    serialized_saga BLOB,
    
    PRIMARY KEY (saga_id),
    KEY IDX_saga_entry_saga_type (saga_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Hibernate Sequence Table for Saga Entry (if needed)
CREATE TABLE IF NOT EXISTS saga_entry_seq (
    next_val BIGINT
) ENGINE=InnoDB;

-- Initialize the sequence tables
INSERT INTO domain_event_entry_seq VALUES (1);
INSERT INTO association_value_entry_seq VALUES (1);
INSERT INTO token_entry_seq VALUES (1);
INSERT IGNORE INTO saga_entry_seq VALUES (1);

-- =====================================================
-- Verification Queries
-- =====================================================
-- Run these to verify the tables were created successfully:

-- SHOW TABLES LIKE '%event%';
-- SHOW TABLES LIKE '%token%';
-- SHOW TABLES LIKE '%association%';
-- 
-- Expected output should include:
-- - association_value_entry
-- - domain_event_entry  
-- - snapshot_event_entry
-- - token_entry

-- =====================================================
-- Grant Permissions (if needed)
-- =====================================================
-- If using separate database users for microservices:
-- GRANT SELECT, INSERT, UPDATE, DELETE ON domain_event_entry TO 'clinprecision_user'@'%';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON snapshot_event_entry TO 'clinprecision_user'@'%';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON association_value_entry TO 'clinprecision_user'@'%';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON token_entry TO 'clinprecision_user'@'%';